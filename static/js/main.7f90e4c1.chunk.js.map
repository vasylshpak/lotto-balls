{"version":3,"sources":["Ball.js","Lottery.js","App.js","serviceWorker.js","index.js"],"names":["Ball","className","this","props","num","Component","Lottery","state","nums","Array","from","length","maxBalls","handleClick","bind","setState","curState","map","n","Math","floor","random","maxNum","generate","title","onClick","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAUeA,G,uLALX,OAAO,yBAAKC,UAAU,QAAQC,KAAKC,MAAMC,S,GAF1BC,c,OCCbC,G,kBAOJ,WAAYH,GAAQ,IAAD,8BACjB,4CAAMA,KACDI,MAAQ,CAAEC,KAAMC,MAAMC,KAAK,CAAEC,OAAQ,EAAKR,MAAMS,YACrD,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHF,E,wEAKP,IAAD,OAETZ,KAAKa,UAAS,SAAAC,GAAQ,MAAK,CACzBR,KAAMQ,EAASR,KAAKS,KAAI,SAAAC,GAAC,OAAIC,KAAKC,MAAMD,KAAKE,SAAW,EAAKlB,MAAMmB,QAAU,W,oCAK/EpB,KAAKqB,a,+BAKL,OACE,6BAAStB,UAAU,WACjB,4BAAKC,KAAKC,MAAMqB,OAChB,6BACGtB,KAAKK,MAAMC,KAAKS,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMd,IAAKc,QAEvC,4BAAQO,QAASvB,KAAKW,aAAtB,iB,GA/BcR,cAAhBC,EAEGoB,aAAe,CACpBF,MAAO,QACPZ,SAAU,EACVU,OAAQ,IAiCGhB,QCzBAqB,E,iLAVX,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASuB,MAAM,aAAaF,OAAQ,GAAIV,SAAU,S,GALxCP,aCOEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7f90e4c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Ball.css';\n\nclass Ball extends Component {\n  render() {\n    return <div className=\"Ball\">{this.props.num}</div>\n\n  }\n}\n\nexport default Ball;\n","import React, { Component } from 'react';\nimport Ball from './Ball'\nimport './Lottery.css'\n\nclass Lottery extends Component {\n\n  static defaultProps = {\n    title: 'Lotto',\n    maxBalls: 6,\n    maxNum: 40\n  }\n  constructor(props) {\n    super(props);\n    this.state = { nums: Array.from({ length: this.props.maxBalls }) };\n    this.handleClick = this.handleClick.bind(this)\n  }\n  generate() {\n    //get random number beetwen min max\n    this.setState(curState => ({\n      nums: curState.nums.map(n => Math.floor(Math.random() * this.props.maxNum) + 1)\n    }))\n\n  }\n  handleClick() {\n    this.generate();\n  }\n\n\n  render() {\n    return (\n      <section className=\"Lottery\">\n        <h1>{this.props.title}</h1>\n        <div>\n          {this.state.nums.map(n => <Ball num={n} />)}\n        </div>\n        <button onClick={this.handleClick}>Generate</button>\n      </section>\n    )\n  }\n}\n\n\nexport default Lottery;\n","import React, { Component } from 'react';\nimport Ball from './Ball'\nimport Lottery from './Lottery';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Lottery />\n        <Lottery title='mini daily' maxNum={10} maxBalls={4} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}